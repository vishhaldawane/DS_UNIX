
9820 44 34 64
vishalviniing@gmail.com



	Unix/Linux Fundamentals with Shell Scripting
				- with Vishhal



		Unix 
		|
		UNICS
		|
		UNiplexed Information ComputingSystem
		|
		single machine
		| abundance of h/w - 32 CPU 64 gb ram
		| abundance of s/w - so many software, EA
		|			websites, apps
		| abundance of users - millions of users
		|
	SCO-UNix - Ken Thompson - santacruz operations project in US
	|RAM, CPU, HDD
	| Kerne l
------------------------------------
|	|	|	|	|
nic	nic	nic	nic	nic<- network card
term	term	term	term	term
mon/key	m/k	m/k		
|	nic = network interface card | terminal
shell
|
ls = list files

rpc = remote procedure call
rmi = remote method invocation

ls


SPARC = scalable process architecture
AIX = advanced information CS(x)

ASCII = american standard code for information interchange


vendor		Bajaj		Yamaha		Sujuki		Hero
engine		DTS-i		Rx100/..	..		..
brand		Pulsar		FZ		Gixxer		Splendor
		<-----------------bike-------------------------------->


bb= black boxes = mainframe = like a super computer
						Unix / GNU-Linux
				<-------------------unix---------------->
		1		2			3	4	5		6
vendor		Intel		Sun Microsystems	HP	IBM	Apple		Linux 		Linus Torvalds
		|		| (Oracle)		|	|	|		|
h/w |cpu	x86		SPARC			hp ser  bb	powerpc		any
OS		MS-Windows	Solaris			HpUX	AIX	Macintosh	RedHat	Mandrake Caldera Suse
		|		|							|	
		ASCII		ASCII						free		paid
		|		|						Fedora1,2,3	RHEL (redhat entreprise linux)	
compiler	ls.c	-----> ls.a						Ubuntu
turboc		|		|
		|		|
linker		ls.obj		ls.o
		|		|
output file	ls.exe ------> ls.out
				|
				rename it
				|
				ls

		dir		ls
	
		Network based OS	vs	Windows XP/2010	

OS
-----------------------------------------
	EA1	EA2	EA3	 EA4
	banking	mesg	printing reservation
--------|-----------------------------------
	|
	10000




Features of enterprise application
-------------------------------------
			Java dotnet cpp

1. remote capability
	socket programming

2. highly available
	24 x 7 = cluster

3. multhithreaded
	Threading code

4. pooling
	common users
	to avail common features
	
5. caching
	unique users with unique dashboard

6. transaction
		transferFund(), sendMessage()
	Atomicity Consistency Isolation Durable

7. security
	https = transport layer security
		OTP
		Grid of ur Debit card
		transaction password
 




			Server Machine
			| recieve this request and process it
			| and generate the response 
			|
			server socket [ ip/port ]
			|Network Card
			|
	--------------------
	|Network Card - NIC 
	|
	client socket [ ip/port ]
	|
	Client Machine
	|
	ls ( request )



Day 1
----------
 1. Introduction to the OS
 2. Getting around the system
 3. Unix file system structure
 4. File commands
 5. Directory commands
 6. soft link vs hard link
 7. File Permissions
 8. Vi editor
----------


cal
cal 2020
cal 7 2020
cal -j [ julian ]
ncal -M [ monday as first day ]
ncal -S [ sunday as first day ]
cal 9 1752
cal -3
cal -y [ current year calendar ]
ls 
ls -l [long list]
time




who - shows all the users logged in
who am i -- shows ur details from who list
whoami --- details not shown

logout

Unix file system structure

	- the international standard strcture for any unix os


			MyComputer | MyPC | This PC
				|
		------------------------------------------------------------------------
		|	|	|	|	|		|
		C:	D:	E:	NN	Downloads	Desktop	Documents



14 directories

top				/ <-- known as the root directory
				|
		-------------------------------------
		|	|	|	|
1		bin	usr	sbin	etc
		10	|	50
			----------
			|	|
2			bin	sbin
			100	500

1. /bin		- binaries - executables [.exe files ]
2. /usr/bin
		1 2   3
		/usr/bin
		|   |
	      root separator
		
3. /sbin	- single user binaries [ for the root user - administrator]
			in windows => Administrator
			in unix    => root
			userid of root is always 0
			groupid of root is always 0
4. /usr/sbin
5. /usr			Unix System Resource

		root is the single user of the system

6. /etc		editable text configuration

			configuration	
			|
		-------------------
		|		|
		wizard		text files
		GUI

7. /opt		= optional directory for third party software
		same like c:\program files

	/opt/jdk11/etc 
	/opt/jdk11/bin <-- javac is stored here
	/opt/adobe/bin/acrobat <-- the exe file 

8. /dev		device driver files

	a character device works as one character at a time
		mouse, keyborad, console 
					

	a block device works a sector[collection of sectors as block]

		512 bytes = 1 sector
		2 sectors = 1 block = 1024 bytes
	
		1024 blocks = 1kb
		1024 kb = 1mb
		1024 mb = 1gb
		

9. /tmp
		same in windows c:\Windows\temp

		its a dumping ground for all the users

		to pass files via it

		if the server reboots the /temp is washed out


10. /home	a major folder for all the users
		to have their personlized homes

			/
			|
		-----------------
		|
		home
		|
	-------------------
	|		|
	jack		jill
	

	/home/java	/home/jill
	

			/
			|
		--------------
		|
		0
		|
		local
		|
		robin
		|
		pizza
		|
		home
		|
	----------------
	|
	jack
 

pwd = print working directory


	cd /bin
	pwd
	/bin <-- is the current directory
	
	cd etc


			paths in unix
			|
		--------------------------
		|			|
	relative path		absolute path
	current folder		always begin with a / 

	cd /usr				cd /usr
	cd bin <-- bin inside /usr	cd etc <-- error since
					etc not found in /usr

					cd /etc <-- absolute path


			/
			|
		--------------
		|
		0
		|
		local
		|
		robin
		|
		pizza
		|
		home
		|
	----------------
	|
	jack


11. /var

		variable data

	/var/at
	/var/cron
	/var/www
	/var/spool

12. /lib
		libraries

13. /proc
		processes as files stored here

14. /	<-- / directory for the root user
		its the home of the root user

15. /root <--- some os has a dedicated root directort as a home		
		for the root user

		/
		|
	-------------
	|
	root <-- here the actual root user will store his/her files










root === the root user
root === for the / directory



quantum world 
|
thoughtrons

Think= thought = invisible = faster tha light



think+think+think = emotions

action

result

		  I		   II
			   =

		T	E	A	R
		|	|	|	|




File commands
--------------------

1. create file
	cat > filename
		data
	^d
2. view the file content
	cat filename
	cat -n filename [ with line numbers ]
3. copy a file
	cp sourcefile  newfile
	cp sourcefile newlocation
4. rename a file
	mv oldfilename newfilename
5. move a file
	mv sourcefile newlocation
6. remove a file
	rm filename
	rm -i filename [ interactive deletion ]
	rm -f filename [ delete with force ]
	rm -r directory [ destroy the complete directory ]
	
DIRECTORY COMMANDS

			/
			|
			home
			|
			user
			| <== ur here 
			office
			|
		-----------------
		|		|
		mail		bank
		|		|
	-----------------	-------------
	|		|	|	|
	inbox	    outbox	icici	hdfc


set -o noclobber [ will not allow the cat > filename to overrite
			if the file already exists ]

set +o noclobber [ restore back to cat > to overwrite ]

set -o noclobber is specific to the session
once you log out the effect is lost
hence save this setting in the user profile script


set -o to see the settings

set -o noclobber [ to on it ]
	now > can overrite

set +o noclobber [ to off it ]
	not  > cannot overwrite

1. make a directory

		mkdir directoryname

2. change to the directory
		cd directoryname

3. exit one level up from the current dirctory

	cd ..
4. anytime switch to the home directory of the current user
	cd Enterkey

5. goto the root
	cd /

6. how to goto the users home folder
	cd ENTERKEY
	or
	cd ~
-------------------------------

Hard Link


	- to share a file across directories

	- the link count is increased by one 

	- changes made via one link can be reflected to the other

	- on deleting a hard linked entry, it diminishes the 
	link count by one

	- it is like a nick name to the existing file

	- it cannot span partition

	- it cannot be created to a folder
		cause folder contains subfolder/multiple files

	- it is only within the partition for a file

	myself
	| rajesh.sharma
	--------friends
	|	  raja
	--------family
		|
		--------parent
		|	 raju
		--------wife
		|	raj
		-------kids
			daddy

			/
			|
		------------------
		|		|
		root		home
		|		|
	  script.sh	----------------
	rw- r-- r--	|		|
			jack		jane
			|		|
			script.sh	script.sh
			log10.txt
		ln log10.txt log9.txt


	ln /root/script.sh /home/jack/script.sh
	ln /root/script.sh /home/jane/script.sh


	find . -inum 409 <--- find all the files hardlinked as 409
				inode number


	find . -inum 409 -exec rm {} \;

		-exec means execute the following command
		ie rm to remove each entry found by the find

----------------------------

What is soft link
	- similar to the shortcut in windows

	ln -s sourcefilepath  softlinkfilename

	ln -s office/bank/hdfc/carloan.txt  mycar
			|			|
		target file's path	  a soft link filename
		inode is 120			190

	it is alwayts a separate file
	[ nothing to do with hard link ]

	- it can be created to a file / directory path

	- it can point to a file across partition

	- use absolute path to file/directory for portable 
		soft links

		/
		|
	----------------
	|		|
	home		SharedFolder
	|		|
	birendra	BankProject
	|			|
	mylog			Data.log


	ln -s /SharedFolder/BankProject/Data.log  mylog


	ln -s First.java mybank

	if mybank is a softlink pointing to a folder
	then a soft link as 'First.java' is created
	in the target folder of mybank
	as First.java [ as a broken link ]

	ln -s First.java sal.txt

	if sal.txt already exists as a soft link, then
	error msg is shown

	




on deletion of softlink, target file remains safe
but if the target file is lost or rename or misplaced
then softlink is broken



---------------------

		MyComputer
		|
	------------------
	|		|	
	C:		D:


	/dev/sda0<-- full drive
	/dev/sda1<-- C:
	/dev/sda2<-- D:
	/dev/hda <-- networked folder from samba server 

	mount /dev/sda1 /root
	mount /dev/sda2 /home
	mount /dev/hda /home/birendra/project

		/
		|
	---------------------------------------
	|1		|2		|
	root		home		opt
			|
		-----------------
		|
		birendra
		|
	---------------
	|3
	project



cd /root
cd /home

man vs info	vs doc 
info ls
info coreutils
info info

---------------------------------------

File permissions : basic model


  uuu ggg ooo  username groupname
  ||| ||| |||	 |       |
- rw- r-- r--  1 rajesh  family  620 Sep 20  2022 wallet.txt
|	       |		 |	 | 	  |
type   link count		size  mtime	file/directory
|
- regular file [ text file ]
d for directory
c for character device
b for block device
s for socket
l for soft link

	unix has 3 types of users
	unix has 3 types of permissions


	user	-	owner of the file/directory

	group	- 	logical set of trusted users

	other	-	neither the onwer nor the group member

			FILE			DIRECTORY
	--------------------------------------------------------
	read		cat			ls

	--------------------------------------------------------
	write		vi file			mkdir,cat>, mv
			cat >> file		cp,rm,rmdir
	--------------------------------------------------------
	execute		run it as a		cd command to
			script			enter into it
	--------------------------------------------------------

The ocean/sea is vast
my boat is frail
Thou Art is with me
and everything well

			possibility of thoughts
positive thoughts			negative thoughts
positive feeling			negative feeling
			possibility of feelings


		+ has the potential of negativity
		- sign doesnt have potentiality of +


		applying permissions
			|
		-------------------		
		|		|
	character 		octal
		|		|
		read		4
		write		2
		execute		1
		---		----
		rwx		7

	      ugo	
	chmod 000 filename [ efficiency ]

	chmod   0 filename
	chmod  00 filename
	chmod 000 fllename

	chmod 7 file.txt
	

	chmod ugo+rwx file.txt
	chmod u+r file.txt [ flexibility ]
	chmod u+rw file.txt
	chmod ug+r file.txt
	chmod u+rwx,g-rwx,o+rwx file.txt

	chmod a+rwx file.txt
		all users 
	

	in[secured]

---------- read permission ---------
1. cat > prince.txt
	hello everyone
	how are you
    ^d to save it
2. ls -l prince.txt
3. cat prince.xt
4. chmod u-r prince.txt
5. ls -l prince.txt
6. cat prince.txt [ will give permission denied error msg ]
7. chmod u+r prince.txt
8. cat prince.txt [ will work ]
----------- write permission ------------
1. chmod u-w prince.txt
2. ls -l prince.txt [ view the permission for the user ]
3. cat >> prince.txt [ will give permission denied error msg ]
4. chmod u+w prince.txt, 
5. ls -l prince.txt <--to view permission
6. cat >> prince.txt 
	new line here
   ^d <-- file is updated now
7. cat prince.txt		
----------- execute permission -----------
1. cat > demo.sh
	cal
	date
	echo how are you
2. ./demo.sh [ will give permission denied error msg ]
3. ls -l demo.sh [ view the permission for the user ]
4. chmod u+x demo.sh 
5. ls -l demo.sh [ view it again ]
4. ./demo.sh [ now the script is running ]


chmod ugo+rwx file.txt
chmod a+rwx file.txt [ grant full permission to all users ]
-----------------------

Directory permission

--------read permission ----

1. mkdir jupitor
2. cd jupitor
3. touch a b c 
4. cd ..
5. ls -l jupitor [ content of this directory are shown ]
6. ls -ld jupitor [ now you can view the permission of it ]
7. chmod u-r jupitor 
8. ls -ld jupitor [ now you can view the permission of it ]
9. ls -l jupitor [ permission denied to view the content 
			of this directory  ]


--------- write permission --------

1. ls -ld jupitor [ view its permission ]
2. chmod u-w jupitor [ now no cat>, rm, cp, mv allowd within it]
			but cp would work if the destination has rights
3. ls -ld jupitor
4. cat > jupitor/d
------------------------------------

--------- execute permission ---------

1. ls -ld jupitor
2. chmod u-x jupitor
3. cd jupitor [ permission denied to enter into the directory ] 
4. ls -l jupitor
	[ in ubuntu it shows the listing with partial details ]
		all other details except filename are not shown
		in mac os it doesnt show the details
		
5. chmod u+x jupitor
6. ls -l jupitor [ contents are seen ]


------------------









		rm -r directory [ can destroy the directory
				with all the subcontent ]

		rm -ri directory [ interactive deletion ]

		rm -rf directory [ force remove ]




TUNE the default permissions
------------------------------

				FILE		DIRECTORY
	BASE permissions	6   6   6	7   7   7
	UMASK		      0	0   2   6     0 0   2   2 
	--------------------------------------------------
	default permissions   0 6   4   4     0 7   5   5		
			        rw- r-- r--   0 rwx r-x r-x


	set the umask to a value so that
	minimum execute permission 
	can be acquired for new coming files
	
				FILE		DIRECTORY
bits of	BASE permissions	110 110 110	111 111 111
bits of	UMASK		      0	101 101 101	101 101 101 
	--------------------------------------------------
	default permissions   0 		
			        
				FILE		DIRECTORY
bits of	BASE permissions	110 110 110	111 111 111
bits of	~UMASK		      0	111 010 010     010 010 010 
	--------------------------------------------------
&	default permissions   0 010 010 010     010 010 010

it can be in the rotatin of 4 and 2 and never into 1
		


	4	100 read
	2	010 write
	1	001 execute
------------------------------
	7	111 rwx

	4+2 [ 6 ] 
	
	100
	010
	---
	110 <-- 6


	4+1 [ 5 ]

	100
	001
	---
	101 <-- 5


can we disable the executablenessof an executable file 
in windows? NO

---------------------

The Vi editor
-------------

	vi = visual editor

	1. at the $ prompt
	2. vi first.sh
	3. vi is in a default mode known as COMMAND MODE
	


	Esc ------>	command mode
			|
       [i]---------------------------[:]
	|			      |	
	insert mode  		last line mode / Ex mode




A	how to create a new file

	1. vi first.sh
	2. press i [ to switch to insert mode ]
	3. type desired data
	4. press ESC [ back to command mode ]
	5. press : [last line mode ]
	6. wq to write and quit [ means :wq ]
		write and quit vi 


B.	how to open a file and discard changes if made

	1. vi first.sh
	2. press i
	3. modify file
	4. press ESC
	5. press :q! [ to discard changes and quit vi ]
		or
	   press :wq [ changes are SAVED ]

	
Command mode commands
----------------------
w	to goto the next word
e	to goto the next word [ halts at the end of each word]
b	backword 
^e	scroll down
^y	scroll up

^f	forward to next page
^b	backward to prev page


dw	delete the current word
5dw	delete 5 words
500dw	500 words to delete

u	to undo last action
3u 	undo last 3 actions

dd	to delete current line
50dd	delete 50 lines


yw	copy a word in the memory
3yw	copy 3 words

p	to paste it from the memory
50p	paste 50 times


		cut		copy
		|		|
word	-->	dw		yw
3words	-->	3dw		3yw
line		dd		yy
5lines		5dd		5yy

		p to paste it

Last line mode commands
------------------------
:set number		to enable the line numbers
:set nonumber		to disable the line number
:1
:10
:$

:40,59y		copy ranged lines

:3,14d		delete ranged lines


-------------------------

	Filters

		- to acquire the desired data
		from the given input

the the the 

Dassault Sytems 
Dassault Sytems 
public static void main


~ symbol means /home/user <-- if ur user account is user


	cd ~deepak <-- cd /home/deepak


	cd ~ <-- going to the home directory of the current user


	cd  ENTER also does the same

	


	vi ~/.vimrc		-- vi /home/user/.vimrc

	
FILTERS
-------------


	1. wc
		word count

			wc emp.lst
			lines words characters of a given file

			wc -l emp.lst

			wc -w emp.lst

			wc -c emp.lst


			ls | wc

			output of ls is converted as an input to
			the next command beyond the PIPE

			this is interprocess communication

		
	echo todays date is date
	echo todays date is `date`

	echo "look at the calendar `cal`"

	echo -e "look at the calendar \n`cal`"


	-e means enable escape sequenecs like \n \t etc

	`` -- grave accent marks - backticks


	anything surrounded by `` must be a command or a script

	"" would preserve the spaces


	'anything inside single quote is not processed'	

	
	A=100
	echo value of A is $A

	echo "value of A is    :    $A" <-- spaces are preserved

	echo 'value of A is $A'   wont fetch value of A

	echo 'look at the calendar `cal`' <-- cal wont run


	"" = preserve space, fetch variables, run commands given inside ``
	'' = string literal
	`` = run commands /script within it






				
	2. head
			fetch top 10 lines from a given input
			head ls.txt
			head server.logfile
				[ shows first 10 lines from the above log file]

			head -n 30 ls.txt
			head -n 5 ls.txt
			ls -ltr | head
			ls -ltr | head -n 5

			
	3. tail
			fetch bottom 10 lines from a given input

			tail ls.txt
			tail server.logfile
				[ lastet bottom 10lines from a file]
			tail -n 40 ls.txt
			ls -ltr | tail -n 5

			tail -f log.txt
				will followup the file changes

	4. cut
		
		to cut the data vertically based on default
		delimiter as TAB key


			cut -f 1 salary.txt
			
			-f means field number

			cut -f 1,2,3 salary.txt

			cut -f 1,3,5,7,8 salary.txt

			cut -f 1-3,5,7- salary.txt


				1-3 means 1 to 3 all columns

				7- means 7 to the last unknown column number

			u cannot shuffle the column view

				
			cut -d "|" -f1 emp.lst

			-d means to specify custom delimiter

		

	Unix concepts and applications - Sumithabha Das
		

	Bash Shell Scripting Guide - ultimate book 

	bash guide pdf

	

	5. tr
		translate characters

	6. grep
		global regular expression print

		
	7. egrep
			multi pattern seaerch

	8. fgrep



	$? holds the exit status of the recently issued command


	
	9. awk

	10. sed




command line arguments
-------------------------

passing parameters to the script at runtime

		$# -- count parameters

		$* is the vector - all parameters

		$1 is the first parameters
		and so on till $9

		$0 is the script name itself



purpose of scripting


	PRogramming
	language		vs		scripting

1	java dotnet cpp c			unix shell scripting
						sql scripting
						perl scripting

2.	data types are here			no data types here
		int char float double		x


3.	data qualifiers				X
		static final
		const 
				
4	data modifiers
		public private protected	X

5. 	rich operators				+ - * / %
	45 symbols in C

6.	huge function libraries			huge filters
						(written in C)

7. 	complex match possible			x

8.	GUI					x

9.	stack quest linked list			X
	trees : DS

10 	mission critical application		handle and automate
	development				all these
						things

				contol the developed applications
						
Script has 3 main purposes
--------------
1. Automation
2. Automation
3. Automation


java programmings langauge		vs	java scripting
|						[ IE chrome
|
project						on browser ]

C
|
wc.c
ls.c
grep.c
cut.c

	





automate.sh
-------------
asdf
sadf
sdaf
asdf
fasd
java Server
sqlplus username password << EOF
	insert quer
	update
	deelte
EOF

python ....... ....
asdf
saf
sadf

gcc sdfsdaf
g++ sadfdsaf
./sakdflsdafj




set | more

	to see the environemnt


echo $HOME

echo $LANG
echo $MAIL
echo $SHELL
echo $PATH
echo $PS1

\h hostname
\W working directory
\u username
\d date
\t time

\s shell
\v shell verison



		env		vs		set
		|				|
		global				local
		|				|
	exported variables			local settings of 
	are available				the current shell
	througout the level			
	of shells


ps = process status

		bash-3.2$ ps
  PID TTY           TIME CMD
  539 ttys000    0:01.88 -bash <--- login shell
 8598 ttys000    0:00.17 vi Day1.txt
  547 ttys001    0:01.56 -bash <--- login shell
 8726 ttys001    0:00.01 bash <- the child shell 


PS1='mi '



	top = see dynamic processees

	ps -ef  <--- to see all the system+ user processes




	ps -ef | grep vi
	ps -ef | grep cat


	kill -2 PID		interrupt signal
	kill -15 PID		termination

	kill -9 PID		force kill

	vi -r peter.txt  <-- to recover the file from a crashed vi session




	alias

	alias c=clear

	alias ll='ls -l'

	alias l.='ls -d .*'

	unalias ll

	aliases are specific to the session
	once logged out, they are gone

	



























